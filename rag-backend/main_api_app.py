from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
from typing import Optional, Dict, Any, List
from fastapi.middleware.cors import CORSMiddleware 

# CORE RAG AGENT IMPORTS

from ai_gateway import process_query_through_gateway
from self_learning_agent import run_refinement_agent 

# FASTAPI SETUP 
app = FastAPI(
    title="JEE/Math RAG Assistant",
    description="An intelligent agent that routes math questions to a Knowledge Base (KB) or Web Search (MCP) and learns from human feedback."
)

# CORS MIDDLEWARE 

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], 
    allow_credentials=True,
    allow_methods=["*"], 
    allow_headers=["*"], 
)


# Schema for the user's question
class SolveRequest(BaseModel):
    query: str = Field(..., description="The math question to be solved.")
    level: str = Field("JEE", description="The academic level hint (e.g., JEE, AP, General).")
    user_id: str = Field("anon", description="Identifier of the user requesting the solution.")

# Schema for the system's final response
class SolveResponse(BaseModel):
    mode: str = Field(..., description="The decision of the Router Agent (KB_RESPONSE, WEB_SEARCH, or REJECTED).")
    solution: str = Field(..., description="The final step-by-step solution or the guardrail rejection message.")
    confidence: float = Field(..., description="The RAG router's confidence score (0.0 to 1.0) in the Knowledge Base hit.")
    status: str = Field(..., description="Internal status code (e.g., 200_OK, 400_BAD_INPUT).")

# Schema for capturing human feedback
class HumanFeedback(BaseModel):
    query: str = Field(..., description="The original question.")
    generated_solution: str = Field(..., description="The flawed solution generated by the system.")
    
    assessment: str = Field(
        ...,
        description="Categorical feedback: CORRECT, INCORRECT, COMPLEX, OFF_TOPIC."
    )
    
    correction_text: Optional[str] = Field(
        None,
        description="The correct solution or hint provided by the human reviewer."
    )
    route_mode: Optional[str] = Field(
        None,
        description="The RAG route taken (KB, WEB, etc.)."
    )
    confidence_score: Optional[float] = Field(
        None,
        description="The router's confidence score."
    )


# API ENDPOINTS 

@app.get("/")
async def root():
    """Returns a welcome message and links to API documentation."""
    return {
        "message": "Welcome to the JEE/Math RAG Assistant API.",
        "documentation": "Visit /docs for API schema and testing.",
        "endpoints": ["/api/solve", "/api/feedback"]
    }

@app.post("/api/solve", response_model=SolveResponse)
async def ask_math(req: SolveRequest):
    """
    Handles a user query by running it through the Guardrails, Router, 
    and the appropriate RAG generation agent.
    """
    
    # The AI Gateway handles the entire complex flow
    gateway_response = process_query_through_gateway(req.query, req.level)
    
    status = gateway_response.get("status")
    
    if status == "400_BAD_INPUT":
        raise HTTPException(
            status_code=400,
            detail=gateway_response["message"]
        )
    elif status == "403_FORBIDDEN" or status == "BLOCKED":
        raise HTTPException(
            status_code=403,
            detail=gateway_response["message"]
        )
    
    return SolveResponse(
        mode=gateway_response["mode"],
        solution=gateway_response["solution"],
        confidence=gateway_response["confidence"],
        status=gateway_response["status"]
    )


@app.post("/api/feedback")
async def submit_feedback(fb: HumanFeedback):
    """
    Collects human feedback and triggers the Self-Learning Refinement Agent 
    for negative feedback that includes a correction.
    """
    feedback_data = fb.model_dump()
    
    run_refinement_agent(feedback_data)
    
    return {"status": "success", "message": "Feedback recorded and refinement process initiated."}

# uvicorn main_api_app:app --reload
